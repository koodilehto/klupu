#!/usr/bin/env python
# -*- coding: utf-8 -*-
# KlupuNG
# Copyright (C) 2014 Koodilehto Osk <http://koodilehto.fi>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

from __future__ import print_function
from __future__ import division
from __future__ import absolute_import

import argparse
import os
import os.path
from urlparse import urljoin

import klupung.flask
import klupung.flask.models
import klupung.ktweb

def import_meeting(meeting_document_data):
    policymaker = klupung.flask.models.Policymaker.query.filter_by(
        abbreviation=meeting_document_data["policymaker_abbreviation"],
        ).first()
    meeting_date = meeting_document_data["start_datetime"]
    meeting = klupung.flask.models.Meeting.query.filter_by(
        policymaker_id=policymaker.id,
        date=meeting_date).first()
    if meeting is None:
        meeting = klupung.flask.models.Meeting(meeting_date,
                                               policymaker.id)
        klupung.flask.db.session.add(meeting)
    return meeting

def import_meeting_document(meeting_document_data, meeting):
    meeting_document = klupung.flask.models.MeetingDocument.query.filter_by(
        origin_id=meeting_document_data["origin_id"]).first()
    if meeting_document is None:
        meeting_document = klupung.flask.models.MeetingDocument(
            meeting_document_data["origin_url"],
            meeting.id,
            meeting_document_data["origin_id"],
            meeting_document_data["publish_datetime"])
    else:
        meeting_document.origin_url = meeting_document_data["origin_url"]
        meeting_document.publish_datetime = meeting_document_data["publish_datetime"]
    klupung.flask.db.session.merge(meeting_document)

def import_issue(agenda_item_data, meeting):
    dnro = agenda_item_data["dnro"]
    if dnro is None:
        return None
    issue = klupung.flask.models.Issue.query.filter_by(register_id=dnro).first()
    subject = agenda_item_data["subject"]
    if issue is None:
        category = klupung.flask.models.Category.query.filter_by(
            origin_id="00").first()
        issue = klupung.flask.models.Issue(dnro, subject, subject, category.id,
                                           meeting.date)
    elif meeting.date > issue.latest_decision_date:
        issue.subject = subject
        issue.summary = subject
        issue.latest_decision_date = meeting.date

    klupung.flask.db.session.merge(issue)
    return issue

def import_agenda_item(meeting_document_data, agenda_item_data, meeting, issue):
    index = agenda_item_data["number"]
    agenda_item = klupung.flask.models.AgendaItem.query.filter_by(
        meeting_id=meeting.id,
        index=index).first()
    subject = agenda_item_data["subject"]
    introducers = ", ".join(agenda_item_data["introducers"])
    preparers = ", ".join(agenda_item_data["preparers"])
    permalink = urljoin(meeting_document_data["origin_url"],
                        "htmtxt%d.htm" % index)
    origin_last_modified_time = meeting_document_data["publish_datetime"]
    if agenda_item is None:
        agenda_item = klupung.flask.models.AgendaItem(
            subject,
            issue.id if issue is not None else None,
            meeting.id,
            index,
            introducers,
            preparers,
            permalink,
            klupung.flask.models.AgendaItem.RESOLUTION_PASSED,
            origin_last_modified_time)
    else:
        agenda_item.subject = subject
        agenda_item.introducers = introducers
        agenda_item.preparers = preparers
        agenda_item.permalink = permalink
        agenda_item.origin_last_modified_time = origin_last_modified_time

    klupung.flask.db.session.merge(agenda_item)
    return agenda_item

def import_agenda_item_resolution(agenda_item, agenda_item_data):
    resolution = agenda_item_data["resolution"]
    content = klupung.flask.models.Content.query.filter_by(
        agenda_item_id=agenda_item.id,
        index=klupung.flask.models.Content.CONTENT_INDEX_RESOLUTION).first()
    if content is None:
        if resolution is not None:
            content = klupung.flask.models.Content(
                klupung.flask.models.Content.CONTENT_TYPE_RESOLUTION,
                resolution,
                klupung.flask.models.Content.CONTENT_INDEX_RESOLUTION,
                agenda_item.id)
        else:
            return None
    else:
        if resolution is None:
            klupung.flask.db.session.delete(content)
            return None
        else:
            content.text = resolution
    klupung.flask.db.session.merge(content)
    return content

def import_agenda_item_draft_resolution(agenda_item, agenda_item_data):
    text = agenda_item_data["proposal"]
    content = klupung.flask.models.Content.query.filter_by(
        agenda_item_id=agenda_item.id,
        index=klupung.flask.models.Content.CONTENT_INDEX_DRAFT_RESOLUTION).first()
    if content is None:
        if text is not None:
            content = klupung.flask.models.Content(
                klupung.flask.models.Content.CONTENT_TYPE_DRAFT_RESOLUTION,
                text,
                klupung.flask.models.Content.CONTENT_INDEX_DRAFT_RESOLUTION,
                agenda_item.id)
        else:
            return None
    else:
        if text is None:
            klupung.flask.db.session.delete(content)
            return None
        else:
            content.text = text
    klupung.flask.db.session.merge(content)
    return content

if __name__ == "__main__":
    arg_parser = argparse.ArgumentParser(
        description="Populate database (tables meeting, meeting_document, "
        "issue and agenda_item) from DIR containing KTWeb meeting documents. "
        "Tables policymaker and category must be populated by other means "
        "since that data cannot be scraped from the documents.")

    arg_parser.add_argument("db_uri", metavar="DB_URI",
                            help="database URI,"
                            "e.g. 'sqlite:////path/to/db.sqlite3'")
    arg_parser.add_argument("ktweb_dir", metavar="DIR",
                            help="KTWeb root directory")
    args = arg_parser.parse_args()

    app = klupung.flask.create_app(args.db_uri)

    app.test_request_context().push()

    klupung.flask.db.session.commit()

    paatokset_dir = os.path.join(args.ktweb_dir, "paatokset")

    for dirpath, dirnames, _ in os.walk(paatokset_dir):

        if not klupung.ktweb.is_meeting_document_dir(dirpath):
            continue

        try:
            meeting_document_data = klupung.ktweb.parse_meeting_document(dirpath)
        except:
            # If just anything goes wrong with parsing, log it and
            # continue to the next meeting document.
            print("Failed to parse meeting document '%s'" % dirpath,
                  file=sys.stderr)
            traceback.print_exc(file=sys.stderr)
            continue

        if meeting_document_data["type"] != "minutes":
            continue

        meeting = import_meeting(meeting_document_data)
        klupung.flask.db.session.commit()

        import_meeting_document(meeting_document_data, meeting)
        klupung.flask.db.session.commit()

        for agenda_item_data in meeting_document_data["agenda_items"]:
            issue = import_issue(agenda_item_data, meeting)
            klupung.flask.db.session.commit()
            agenda_item = import_agenda_item(meeting_document_data, agenda_item_data, meeting, issue)
            klupung.flask.db.session.commit()
            import_agenda_item_resolution(agenda_item, agenda_item_data)
            klupung.flask.db.session.commit()
            import_agenda_item_draft_resolution(agenda_item, agenda_item_data)
            klupung.flask.db.session.commit()

        del dirnames[:]
