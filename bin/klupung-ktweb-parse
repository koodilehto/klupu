#!/usr/bin/env python
# -*- coding: utf-8 -*-
# KlupuNG
# Copyright (C) 2014 Koodilehto Osk <http://koodilehto.fi>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

from __future__ import print_function
from __future__ import division
from __future__ import absolute_import

import argparse
import locale
import os
from urlparse import urljoin

import klupung
import klupung.models
import klupung.ktweb

def import_categories():
    category = klupung.models.Category("Kaikki", "00")
    klupung.db.session.add(category)

def import_policymakers():
    abbrevs = os.listdir("paatokset")
    encoding = locale.getpreferredencoding()
    for abbrev in [unicode(a.decode(encoding)) for a in abbrevs]:
        policymaker = klupung.models.Policymaker(abbrev, abbrev)
        klupung.db.session.add(policymaker)

def import_meeting(meeting_document_data):
    policymaker = klupung.models.Policymaker.query.filter_by(
        abbreviation=meeting_document_data["policymaker_abbreviation"],
        ).first()
    meeting_date = meeting_document_data["start_datetime"].date()
    meeting = klupung.models.Meeting.query.filter_by(
        policymaker_id=policymaker.id,
        date=meeting_date).first()
    if meeting is None:
        meeting = klupung.models.Meeting(meeting_date,
                                         policymaker.id)
        klupung.db.session.add(meeting)
    return meeting

def import_meeting_document(meeting_document_data, meeting):
    meeting_document = klupung.models.MeetingDocument.query.filter_by(
        origin_id=meeting_document_data["origin_id"]).first()
    if meeting_document is None:
        meeting_document = klupung.models.MeetingDocument(
            meeting_document_data["origin_url"],
            meeting.id,
            meeting_document_data["origin_id"],
            meeting_document_data["publish_datetime"])
        klupung.db.session.add(meeting_document)

def import_agenda_item(meeting_document_data, agenda_item_data, meeting):
    agenda_item = klupung.models.AgendaItem.query.filter_by(
        meeting_id=meeting.id,
        index=agenda_item_data["number"]).first()
    if agenda_item is None:
        issue = klupung.models.Issue.query.filter_by(
            register_id=agenda_item_data["dnro"]).first()
        if issue is None and agenda_item_data["dnro"] is not None:
            category = klupung.models.Category.query.filter_by(
                origin_id="00").first()
            issue = klupung.models.Issue(
                agenda_item_data["dnro"],
                agenda_item_data["subject"],
                agenda_item_data["subject"],
                category.id)
            klupung.db.session.add(issue)
            klupung.db.session.commit()
        agenda_item = klupung.models.AgendaItem(
            agenda_item_data["subject"],
            issue.id if issue is not None else None,
            meeting.id,
            agenda_item_data["number"],
            ", ".join(agenda_item_data["introducers"]),
            ", ".join(agenda_item_data["preparers"]),

            urljoin(meeting_document_data["origin_url"],
                    "htmtxt%d.htm" % agenda_item_data["number"]),
            klupung.models.AgendaItem.RESOLUTION_PASSED,
            meeting_document_data["publish_datetime"])
        klupung.db.session.add(agenda_item)
    return agenda_item

def import_agenda_item_contents(agenda_item, agenda_item_data):
    resolution = agenda_item_data["resolution"]
    if resolution is None:
        return None
    content = klupung.models.Content.query.filter_by(
        agenda_item_id=agenda_item.id,
        index=klupung.models.Content.CONTENT_INDEX_RESOLUTION).first()
    if content is None:
        content = klupung.models.Content(
            klupung.models.Content.CONTENT_TYPE_RESOLUTION,
            resolution,
            klupung.models.Content.CONTENT_INDEX_RESOLUTION,
            agenda_item.id)
        klupung.db.session.add(content)
    return content

if __name__ == "__main__":
    arg_parser = argparse.ArgumentParser(description="Populate database.")

    arg_parser.add_argument("db_uri", metavar="DB_URI",
                            help="database URI, e.g. 'sqlite:////path/to/db.sqlite3'")
    args = arg_parser.parse_args()

    app = klupung.create_app(args.db_uri)

    app.test_request_context().push()

    klupung.db.create_all(app=app)

    import_categories()
    import_policymakers()
    klupung.db.session.commit()

    for dirpath, dirnames, _ in os.walk("paatokset"):

        if len(dirpath.split("/")) != 4:
            # Ignore all but potential meeting doc dirs.
            continue

        meeting_document_data = klupung.ktweb.parse_meeting_document(dirpath)

        meeting = import_meeting(meeting_document_data)
        klupung.db.session.commit()

        import_meeting_document(meeting_document_data, meeting)
        klupung.db.session.commit()

        for agenda_item_data in meeting_document_data["agenda_items"]:
            agenda_item = import_agenda_item(meeting_document_data, agenda_item_data, meeting)
            klupung.db.session.commit()
            import_agenda_item_contents(agenda_item, agenda_item_data)
            klupung.db.session.commit()

        del dirnames[:]
