#!/usr/bin/env python
# KlupuNG
# Copyright (C) 2013 Koodilehto Osk <http://koodilehto.fi>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from __future__ import print_function
from __future__ import division
from __future__ import absolute_import

import argparse

import klupung
import klupung.ktweb
import klupung.models

arg_parser = argparse.ArgumentParser(
    description="Import meeting documents into a database.")

arg_parser.add_argument("db_uri", metavar="DB_URI",
                        help="database URI, e.g. 'sqlite:///klupung.db'")
arg_parser.add_argument("meetingdoc_dir", metavar="DIR",
                        help="meeting document directory")
arg_parser.add_argument("-q", "--quiet", default=False, action="store_true",
                        help="Do not print any output")

args = arg_parser.parse_args()

app = klupung.create_app(args.db_uri)
app.test_request_context().push()

if not klupung.ktweb.is_meetingdoc_dir(args.meetingdoc_dir):
    arg_parser.error("%r is not a meeting document directory" %
                     args.meetingdoc_dir)

if not args.quiet:
    print("parsing meeting document directory '%s'" % args.meetingdoc_dir)

meetingdoc = klupung.ktweb.parse_meetingdoc(args.meetingdoc_dir)
policymaker_abbrev = meetingdoc["policymaker_abbreviation"]
policymaker = klupung.models.Policymaker.query.filter_by(
    abbreviation=policymaker_abbrev).first()

meeting_start_datetime = meetingdoc["start_datetime"]
meeting = klupung.models.Meeting.query.filter_by(
    policymaker_id=policymaker.id,
    start_datetime=meeting_start_datetime).first()
if meeting is None:
    meeting = klupung.models.Meeting(meeting_start_datetime,
                                     policymaker.id)
    klupung.db.session.add(meeting)
    klupung.db.session.commit()

meeting_document = klupung.models.MeetingDocument.query.filter_by(
    origin_id=meetingdoc["origin_id"]).first()
if meeting_document is None:

    meeting_document = klupung.models.MeetingDocument(
        meetingdoc["origin_url"],
        meeting.id,
        meetingdoc["origin_id"])
    klupung.db.session.add(meeting_document)
    klupung.db.session.commit()
